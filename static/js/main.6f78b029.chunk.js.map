{"version":3,"sources":["core/actions/constants.ts","components/atoms/CreateTaskBtn/CreateTaskBtn.tsx","components/molecules/Modal/Modal.tsx","components/atoms/Title/Title.tsx","components/molecules/Navigation/Navigation.tsx","components/template/MainTemplate.tsx","components/atoms/CreateTaskModal/CreateTaskModal.tsx","core/selectors/tasksSelectors.ts","core/actions/tasksAction.ts","components/atoms/ChangeTaskModal/ChangeTaskModal.tsx","components/molecules/TaskCard/TaskCard.tsx","components/pages/ViewTasks.tsx","components/pages/AddTasks.tsx","components/helpers/helpers.ts","components/pages/Error.tsx","App.tsx","core/store.ts","reportWebVitals.ts","core/reducers/tasksReducer.ts","core/rootReducer.ts","index.tsx"],"names":["ACTIONS","CreateTaskBtn","memo","onClickCreate","className","onClick","Modal","active","setActive","children","e","stopPropagation","Title","title","Navigation","to","MainTemplate","mainBlock","CreateTaskModal","value","onChangeHandler","isValid","onChange","target","disabled","getTasksSelector","tasksReducer","createTaskAction","createAction","CREATE_TASK","ChangeTaskModal","onChangeTask","onClickChange","TaskCard","onClickCard","onClickDel","cardsArray","map","item","id","description","allTasks","ViewTasks","dispatch","useDispatch","useState","modalActive","setModalActive","taskActions","useSelector","modalValue","setModalValue","currentId","setCurrentId","todoArray","setToDoArray","changedTodo","text","find","closest","addModalValue","index","findIndex","splice","deleteItem","taskItem","getChangedToDo","AddTasks","uid","Date","now","toString","Math","random","substr","setText","isValidText","length","newToDo","push","Error","App","preloadedState","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","handleAction","state","payload","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","basename","document","getElementById"],"mappings":"qTAAYA,E,mECQCC,EAAgBC,gBAAK,YAAwC,IAArCC,EAAoC,EAApCA,cACnC,OACE,wBAAQC,UAAU,kBAAkBC,QAASF,EAA7C,kBCDSG,G,MAAQJ,gBAAK,YAA8C,IAA3CK,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,SAC9C,OACE,qBACEL,UAAWG,EAAS,eAAiB,QACrCF,QAAS,kBAAMG,GAAU,IAF3B,SAIE,qBACEJ,UAAWG,EAAS,uBAAyB,gBAC7CF,QAAS,SAACK,GAAD,OAAOA,EAAEC,mBAFpB,SAIGF,UCXIG,G,MAAQV,gBAAK,gBAAGW,EAAH,EAAGA,MAAH,OACxB,oBAAIT,UAAU,QAAd,SAAuBS,Q,OCJZC,G,MAAaZ,gBAAK,WAC7B,OACE,qBAAKE,UAAU,UAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,qBAAKA,UAAU,eAAf,SACE,6CAEF,qBAAIA,UAAU,WAAd,UACE,oBAAIA,UAAU,YAAd,SACE,cAAC,IAAD,CAAMA,UAAU,WAAWW,GAAI,IAA/B,4BAIF,oBAAIX,UAAU,YAAd,SACE,cAAC,IAAD,CAAMA,UAAU,WAAWW,GAAI,aAA/B,sCCZCC,EAAe,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,UAC7B,OACE,sBAAKb,UAAU,gBAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,wBAAf,SACE,8BAAMa,UCADC,G,MAAkBhB,gBAC7B,YAMyB,IALvBM,EAKsB,EALtBA,UACAW,EAIsB,EAJtBA,MACAd,EAGsB,EAHtBA,QACAe,EAEsB,EAFtBA,gBACAC,EACsB,EADtBA,QAEA,OACE,sBAAKjB,UAAU,eAAf,UACE,mBAAGA,UAAU,oBAAb,8BACA,0BACEA,UACEiB,EACI,wCACA,wBAENF,MAAOA,EACPG,SAAU,SAACZ,GAAD,OAAOU,EAAgBV,EAAEa,OAAOJ,QAP5C,SASGE,IAEH,wBACEG,UAAWH,EACXjB,UAAWiB,EAAU,mBAAqB,4BAC1ChB,QAAS,WACPG,GAAU,GACVH,KALJ,gCChCKoB,EAAmB,SAAC,GAAD,SAAGC,c,yBPFvB1B,K,2BAAAA,M,KQGL,IAAM2B,EAAmBC,uBAAa5B,EAAQ6B,YAArBD,GCQnBE,G,MAAkB5B,gBAC7B,YAA0E,IAAvEM,EAAsE,EAAtEA,UAAWW,EAA2D,EAA3DA,MAAOY,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,cACjC,OACE,sBAAK5B,UAAU,eAAf,UACE,mBAAGA,UAAU,oBAAb,8BACA,0BACEA,UAAU,wBACVe,MAAOA,EACPG,SAAU,SAACZ,GAAD,OAAOqB,EAAarB,EAAEa,OAAOJ,UAEzC,wBACEf,UAAU,mBACVC,QAAS,SAACK,GACRF,GAAU,GACVwB,EAActB,IAJlB,gCCZKuB,G,MAAW/B,gBACtB,YAAyD,IAAtDgC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,WAC1B,OACE,qBAAKhC,UAAU,aAAf,gBACGgC,QADH,IACGA,OADH,EACGA,EAAYC,KAAI,SAACC,GAChB,OACE,sBAAKlC,UAAU,oBAAkCmC,GAAID,EAAKC,GAA1D,UACE,mBAAGnC,UAAU,YAAb,SAA0BkC,EAAKE,cAC/B,sBAAKpC,UAAU,YAAf,UACE,wBAAQA,UAAU,aAAaC,QAAS6B,EAAxC,oBAGA,wBAAQ9B,UAAU,aAAaC,QAAS8B,EAAxC,yBANoCG,EAAKC,aCH5CE,EAAuB,GAEvBC,EAAYxC,gBAAK,WAC5B,IAAMyC,EAAWC,cAEjB,EAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAGMC,EAAcC,YAAYxB,GAGhC,EAAoCoB,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAGA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAGA,EAAkCR,mBAASJ,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KAqBMC,EAAc,SAACC,GACnBd,EACEhB,EAAiB,CACfa,YAAaiB,EACblB,GAAIa,MAYV,OACE,8BACE,cAAC,EAAD,CACEnC,UACE,gCACE,sBAAKb,UAAU,0BAAf,UACE,cAAC,EAAD,CAAOS,MAAO,qBACd,cAAC,EAAD,CACEqB,YAAa,SAACxB,GACZqC,GAAe,GAlCT,SAACrC,GACrB,IAAMS,EAAQsB,EAASiB,MACrB,SAACpB,GAAD,OAAUA,EAAKC,KAAO7B,EAAEa,OAAOoC,QAAQ,sBAAsBpB,MAE/DY,EAAchC,EAAMqB,aACpBa,EAAalC,EAAMoB,IA8BLqB,CAAclD,IAEhByB,WAAY,SAACzB,GAAD,OA9CP,SAACA,GAClB,IAAMmD,EAAQpB,EAASqB,WACrB,SAACxB,GAAD,OAAUA,EAAKC,KAAO7B,EAAEa,OAAOoC,QAAQ,sBAAsBpB,MAE/DE,EAASsB,OAAOF,EAAO,GACvBN,EAAa,GAAD,OAAKd,IAyCcuB,CAAWtD,IAC9B0B,WAAYkB,OAGhB,cAAC,EAAD,CAAO/C,OAAQuC,EAAatC,UAAWuC,EAAvC,SAEI,cAAC,EAAD,CACEvC,UAAWuC,EACX5B,MAAO+B,EACPnB,aAAc,SAAC0B,GACbN,EAAcM,GACdD,EAAYC,IAEdzB,cAAe,SAACtB,GACd8C,EAAYN,GAhCP,WACrB,IAAMW,EAAQpB,EAASqB,WAAU,SAACxB,GAAD,OAAUA,EAAKC,KAAOa,KACvDX,EAASsB,OAAOF,EAAO,EAAGb,EAAYiB,UACtCV,EAAad,GA8BGyB,kBChFPC,EAAWjE,gBAAK,WAC3B,IAAMyC,EAAWC,cAGXwB,EAAM,WAGV,OAFaC,KAAKC,MAAMC,SAAS,IACpBC,KAAKC,SAASF,SAAS,IAAIG,OAAO,IAKjD,EAAsC7B,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAGA,EAAwBF,mBAAS,IAAjC,mBAAOY,EAAP,KAAakB,EAAb,KAGMC,EAA2BnB,EC9BgBoB,OAAS,EDiCpD7B,EAAcC,YAAYxB,GAG1BqD,EAAU,SAACrB,EAAclB,GAC7BI,EACEhB,EAAiB,CACfa,YAAaiB,EACblB,GAAIA,MAKV,OACE,8BACE,cAAC,EAAD,CACEtB,UACE,gCACE,sBAAKb,UAAU,iBAAf,UACE,cAAC,EAAD,CAAOS,MAAO,iBACd,cAAC,EAAD,CAAeV,cAAe,kBAAM4C,GAAe,SAErD,cAAC,EAAD,CAAOxC,OAAQuC,EAAatC,UAAWuC,EAAvC,SAEI,cAAC,EAAD,CACEvC,UAAWuC,EACX5B,MAAOsC,EACPrC,gBAAiB,SAACqC,GAChBkB,EAAQlB,GACRqB,EAAQrB,EAAMW,MAEhB/D,QAAS,WACPyE,EAAQrB,EAAMW,KACd3B,EAASsC,KAAK/B,EAAYiB,UAC1BU,EAAQ,KAEVtD,QAASuD,gBE/DdI,EAAQ9E,gBAAK,WACxB,OACE,8BACE,cAAC,EAAD,CACEe,UACE,8BACE,qBAAKb,UAAU,aAAf,SACE,cAAC,EAAD,CAAOS,MAAO,qBCOboE,ICfSC,EDeTD,EAZf,WACE,OACE,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOE,UAAWhB,EAAUiB,KAAK,IAAIC,OAAK,IAC1C,cAAC,IAAD,CAAOF,UAAWzC,EAAW0C,KAAK,eAClC,cAAC,IAAD,CAAOD,UAAWH,EAAOI,KAAK,YECvBE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCMD7D,EAAeqE,wBARM,CAChC9B,SAAU,KAUI+B,aACdrE,GACA,SAACsE,EAAD,OAAmBhC,EAAnB,EAAUiC,QAAV,mBAAC,eACID,GADL,IAEEhC,gBCnBSkC,EAAcC,0BAAgB,CAAE1E,iB,QHU9B2E,GATSnB,EAOK,GAN3BoB,sBACEH,EACAjB,EACAqB,8BAAoBC,+BICxBC,IAASC,OACP,cAAC,IAAD,CAAeC,SAAS,QAAxB,SACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAG1BvB,M","file":"static/js/main.6f78b029.chunk.js","sourcesContent":["export enum ACTIONS {\r\n  CREATE_TASK = \"CREATE_TASK\",\r\n}\r\n","import * as React from \"react\";\r\nimport { memo } from \"react\";\r\nimport \"./index.css\";\r\n\r\ninterface ICreateTaskBtn {\r\n  onClickCreate: () => void;\r\n}\r\n\r\nexport const CreateTaskBtn = memo(({ onClickCreate }: ICreateTaskBtn) => {\r\n  return (\r\n    <button className=\"create-task-btn\" onClick={onClickCreate}>\r\n      +\r\n    </button>\r\n  );\r\n});\r\n","import * as React from \"react\";\r\nimport { memo } from \"react\";\r\nimport \"./index.css\";\r\n\r\ninterface IModal {\r\n  active: boolean;\r\n  setActive: (modalActive: boolean) => void;\r\n  children: any;\r\n}\r\nexport const Modal = memo(({ active, setActive, children }: IModal) => {\r\n  return (\r\n    <div\r\n      className={active ? \"modal active\" : \"modal\"}\r\n      onClick={() => setActive(false)}\r\n    >\r\n      <div\r\n        className={active ? \"modal-content active\" : \"modal-content\"}\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import * as React from \"react\";\r\nimport { memo } from \"react\";\r\nimport \"./index.css\";\r\n\r\ninterface ITitle {\r\n  title: string;\r\n}\r\n\r\nexport const Title = memo(({ title }: ITitle) => (\r\n  <h2 className=\"title\">{title}</h2>\r\n));\r\n","import * as React from \"react\";\r\nimport { memo } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\nexport const Navigation = memo(() => {\r\n  return (\r\n    <nav className=\"app-nav\">\r\n      <div className=\"app-nav-container\">\r\n        <div className=\"app-headline\">\r\n          <h1>ToDo List</h1>\r\n        </div>\r\n        <ul className=\"nav-list\">\r\n          <li className=\"nav-point\">\r\n            <Link className=\"for-link\" to={\"/\"}>\r\n              Create Tasks\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-point\">\r\n            <Link className=\"for-link\" to={\"/viewTasks\"}>\r\n              View Tasks\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { Navigation } from \"../molecules/Navigation\";\r\n\r\ninterface IMainTemplate {\r\n  mainBlock: React.ReactNode;\r\n}\r\n\r\nexport const MainTemplate = ({ mainBlock }: IMainTemplate) => {\r\n  return (\r\n    <div className=\"main-template\">\r\n      <Navigation />\r\n      <div className=\"main-template-wrapper\">\r\n        <div>{mainBlock}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { memo } from \"react\";\r\nimport \"./index.css\";\r\n\r\ninterface ICreateTaskModal {\r\n  setActive: (modalActive: boolean) => void;\r\n  value: string;\r\n  onClick: () => void;\r\n  onChangeHandler: (text: string) => void;\r\n  isValid: boolean;\r\n}\r\n\r\nexport const CreateTaskModal = memo(\r\n  ({\r\n    setActive,\r\n    value,\r\n    onClick,\r\n    onChangeHandler,\r\n    isValid,\r\n  }: ICreateTaskModal) => {\r\n    return (\r\n      <div className=\"create-modal\">\r\n        <p className=\"create-modal-text\">create your task</p>\r\n        <textarea\r\n          className={\r\n            isValid\r\n              ? \"create-modal-textarea active-textarea\"\r\n              : \"create-modal-textarea\"\r\n          }\r\n          value={value}\r\n          onChange={(e) => onChangeHandler(e.target.value)}\r\n        >\r\n          {isValid}\r\n        </textarea>\r\n        <button\r\n          disabled={!isValid}\r\n          className={isValid ? \"create-modal-btn\" : \"create-modal-btn _disable\"}\r\n          onClick={() => {\r\n            setActive(false);\r\n            onClick();\r\n          }}\r\n        >\r\n          Create task\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import { IState } from \"../types\";\r\n\r\nexport const getTasksSelector = ({ tasksReducer }: IState) => tasksReducer;\r\n","import { createAction } from \"typesafe-actions\";\r\nimport { ACTIONS } from \"./constants\";\r\n\r\nexport const createTaskAction = createAction(ACTIONS.CREATE_TASK)<{}>();\r\n","import * as React from \"react\";\r\nimport { memo } from \"react\";\r\nimport \"./index.css\";\r\n\r\ninterface IChangeTaskModal {\r\n  setActive: (modalActive: boolean) => void;\r\n  value: string;\r\n  onChangeTask: (text: string) => void;\r\n  onClickChange: (e: any) => void;\r\n}\r\n\r\nexport const ChangeTaskModal = memo(\r\n  ({ setActive, value, onChangeTask, onClickChange }: IChangeTaskModal) => {\r\n    return (\r\n      <div className=\"change-modal\">\r\n        <p className=\"change-modal-text\">Change your task</p>\r\n        <textarea\r\n          className=\"change-modal-textarea\"\r\n          value={value}\r\n          onChange={(e) => onChangeTask(e.target.value)}\r\n        ></textarea>\r\n        <button\r\n          className=\"change-modal-btn\"\r\n          onClick={(e) => {\r\n            setActive(false);\r\n            onClickChange(e);\r\n          }}\r\n        >\r\n          Change task\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import * as React from \"react\";\r\nimport { memo } from \"react\";\r\nimport \"./index.css\";\r\ninterface ITaskCard {\r\n  onClickCard: (e: any) => void;\r\n  onClickDel: (e: any) => void;\r\n  cardsArray: Array<any>;\r\n}\r\n\r\nexport const TaskCard = memo(\r\n  ({ onClickCard, onClickDel, cardsArray }: ITaskCard) => {\r\n    return (\r\n      <div className=\"tasks-list\">\r\n        {cardsArray?.map((item) => {\r\n          return (\r\n            <div className=\"created-task-card\" key={item.id} id={item.id}>\r\n              <p className=\"card-text\">{item.description}</p>\r\n              <div className=\"card-btns\">\r\n                <button className=\"change-btn\" onClick={onClickCard}>\r\n                  Change\r\n                </button>\r\n                <button className=\"delete-btn\" onClick={onClickDel}>\r\n                  Delete\r\n                </button>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React, { useState } from \"react\";\r\nimport { memo } from \"react\";\r\nimport { ChangeTaskModal } from \"../atoms/ChangeTaskModal\";\r\nimport { Title } from \"../atoms/Title\";\r\nimport { Modal } from \"../molecules/Modal\";\r\nimport { TaskCard } from \"../molecules/TaskCard\";\r\nimport { MainTemplate } from \"../template/MainTemplate\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getTasksSelector } from \"../../core/selectors/tasksSelectors\";\r\nimport { createTaskAction } from \"../../core/actions\";\r\n\r\n// создание глобальной переменной, для перекидывания на др. страницу\r\nexport const allTasks: Array<any> = [];\r\n\r\nexport const ViewTasks = memo(() => {\r\n  const dispatch = useDispatch();\r\n  //открытие модального окна\r\n  const [modalActive, setModalActive] = useState(false);\r\n\r\n  //получает объект всех экшенов\r\n  const taskActions = useSelector(getTasksSelector);\r\n\r\n  //начальное значение value\r\n  const [modalValue, setModalValue] = useState(\"\");\r\n\r\n  //значение карточки,которую мы выбираем\r\n  const [currentId, setCurrentId] = useState(\"\");\r\n\r\n  //изначальное  значение - со всеми созданными картами(объектами)\r\n  const [todoArray, setToDoArray] = useState(allTasks);\r\n\r\n  //функция удаления\r\n  const deleteItem = (e: any) => {\r\n    const index = allTasks.findIndex(\r\n      (item) => item.id === e.target.closest(\".created-task-card\").id\r\n    );\r\n    allTasks.splice(index, 1);\r\n    setToDoArray([...allTasks]);\r\n  };\r\n\r\n  //функция открытия модалки со значением задачи\r\n  const addModalValue = (e: any) => {\r\n    const value = allTasks.find(\r\n      (item) => item.id === e.target.closest(\".created-task-card\").id\r\n    );\r\n    setModalValue(value.description);\r\n    setCurrentId(value.id);\r\n  };\r\n\r\n  //функция создания нового объекта с новым значением, но со старым id\r\n  const changedTodo = (text: string) => {\r\n    dispatch(\r\n      createTaskAction({\r\n        description: text,\r\n        id: currentId,\r\n      })\r\n    );\r\n  };\r\n\r\n  // функция заменения элемента в массиве с задачами на новый\r\n  const getChangedToDo = () => {\r\n    const index = allTasks.findIndex((item) => item.id === currentId);\r\n    allTasks.splice(index, 1, taskActions.taskItem);\r\n    setToDoArray(allTasks);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MainTemplate\r\n        mainBlock={\r\n          <div>\r\n            <div className=\"view-tasks-page-wrapper\">\r\n              <Title title={\"CHECK YOUR TASKS\"} />\r\n              <TaskCard\r\n                onClickCard={(e) => {\r\n                  setModalActive(true);\r\n                  addModalValue(e);\r\n                }}\r\n                onClickDel={(e) => deleteItem(e)}\r\n                cardsArray={todoArray}\r\n              />\r\n            </div>\r\n            <Modal active={modalActive} setActive={setModalActive}>\r\n              {\r\n                <ChangeTaskModal\r\n                  setActive={setModalActive}\r\n                  value={modalValue}\r\n                  onChangeTask={(text: string) => {\r\n                    setModalValue(text);\r\n                    changedTodo(text);\r\n                  }}\r\n                  onClickChange={(e: any) => {\r\n                    changedTodo(modalValue);\r\n                    getChangedToDo();\r\n                  }}\r\n                />\r\n              }\r\n            </Modal>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { memo } from \"react\";\r\nimport { CreateTaskBtn } from \"../atoms/CreateTaskBtn\";\r\nimport { Modal } from \"../molecules/Modal\";\r\nimport { Title } from \"../atoms/Title\";\r\nimport { MainTemplate } from \"../template/MainTemplate\";\r\nimport { CreateTaskModal } from \"../atoms/CreateTaskModal\";\r\nimport { getTasksSelector } from \"../../core/selectors/tasksSelectors\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { validateName } from \"../helpers/helpers\";\r\nimport { createTaskAction } from \"../../core/actions\";\r\nimport { allTasks } from \"./ViewTasks\";\r\n\r\nexport const AddTasks = memo(() => {\r\n  const dispatch = useDispatch();\r\n\r\n  //функция, которая возвращает уникальный id\r\n  const uid = () => {\r\n    const head = Date.now().toString(36);\r\n    const tail = Math.random().toString(36).substr(2);\r\n    return head + tail;\r\n  };\r\n\r\n  //открытие модального окна\r\n  const [modalActive, setModalActive] = useState(false);\r\n\r\n  //передаём текст инпута (и его начальное состояние)\r\n  const [text, setText] = useState(\"\");\r\n\r\n  // не даёт создать пустое задание\r\n  const isValidText = validateName(text);\r\n\r\n  // получаем объект, из всех наших экшенов\r\n  const taskActions = useSelector(getTasksSelector);\r\n\r\n  //функция которая создаёт новую задачу\r\n  const newToDo = (text: string, id: string) => {\r\n    dispatch(\r\n      createTaskAction({\r\n        description: text,\r\n        id: id,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MainTemplate\r\n        mainBlock={\r\n          <div>\r\n            <div className=\"add-tasks-page\">\r\n              <Title title={\"ADD NEW TASK\"} />\r\n              <CreateTaskBtn onClickCreate={() => setModalActive(true)} />\r\n            </div>\r\n            <Modal active={modalActive} setActive={setModalActive}>\r\n              {\r\n                <CreateTaskModal\r\n                  setActive={setModalActive}\r\n                  value={text}\r\n                  onChangeHandler={(text: string) => {\r\n                    setText(text);\r\n                    newToDo(text, uid());\r\n                  }}\r\n                  onClick={() => {\r\n                    newToDo(text, uid());\r\n                    allTasks.push(taskActions.taskItem);\r\n                    setText(\"\");\r\n                  }}\r\n                  isValid={isValidText}\r\n                />\r\n              }\r\n            </Modal>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","export const validateName = (name: string) => name.length > 0;\r\n","import React from \"react\";\r\nimport { memo } from \"react\";\r\nimport { Title } from \"../atoms/Title\";\r\nimport { MainTemplate } from \"../template/MainTemplate\";\r\n\r\nexport const Error = memo(() => {\r\n  return (\r\n    <div>\r\n      <MainTemplate\r\n        mainBlock={\r\n          <div>\r\n            <div className=\"error-page\">\r\n              <Title title={\"ERROR\"} />\r\n            </div>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { AddTasks } from \"./components/pages/AddTasks\";\nimport { ViewTasks } from \"./components/pages/ViewTasks\";\nimport { Error } from \"./components/pages/Error\";\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route component={AddTasks} path=\"/\" exact />\n        <Route component={ViewTasks} path=\"/viewTasks\" />\n        <Route component={Error} path=\"*\" />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { rootReducer } from \"../core/rootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst configureStore = (preloadedState: any) =>\r\n  createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeWithDevTools(applyMiddleware())\r\n  );\r\n\r\nconst store = configureStore({});\r\n\r\nexport default store;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ActionType, createReducer } from \"typesafe-actions\";\r\nimport { createTaskAction } from \"../actions/tasksAction\";\r\n\r\nexport interface ITasksState {\r\n  taskItem: object;\r\n}\r\n\r\nconst defaultState: ITasksState = {\r\n  taskItem: {},\r\n};\r\n\r\nconst actions = {\r\n  createTaskAction,\r\n};\r\n\r\nexport const tasksReducer = createReducer<\r\n  ITasksState,\r\n  ActionType<typeof actions>\r\n>(defaultState).handleAction(\r\n  createTaskAction,\r\n  (state, { payload: taskItem }) => ({\r\n    ...state,\r\n    taskItem,\r\n  })\r\n);\r\n","import { combineReducers } from \"redux\";\r\nimport { tasksReducer } from \"../../src/core/reducers/tasksReducer\";\r\n\r\nexport const rootReducer = combineReducers({ tasksReducer });\r\n\r\nexport default rootReducer;\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./core/store\";\n\nReactDOM.render(\n  <BrowserRouter basename=\"/ToDo\">\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}